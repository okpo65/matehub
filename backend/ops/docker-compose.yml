version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: matehub-postgres
    environment:
      POSTGRES_USER: matehub
      POSTGRES_PASSWORD: password
      POSTGRES_DB: matehub
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U matehub -d matehub"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - matehub-network

  # Redis service for Celery broker and result backend
  redis:
    image: redis:7-alpine
    container_name: matehub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - matehub-network

  # FastAPI application
  api:
    build:
      context: ..
      dockerfile: ops/Dockerfile
    container_name: matehub-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://matehub:password@postgres:5432/matehub
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=matehub
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=matehub
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=true
      - SECRET_KEY=your-secret-key-change-this-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_DEFAULT_MODEL=llama3.2
      - LLM_MODEL=llama3.2
      - ENVIRONMENT=docker
    volumes:
      - ../app:/app/app:ro
      - ../main.py:/app/main.py:ro
      - ../celery_app.py:/app/celery_app.py:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - matehub-network

  # Celery worker
  celery-worker:
    build:
      context: ..
      dockerfile: ops/Dockerfile
    container_name: matehub-celery-worker
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - DATABASE_URL=postgresql://matehub:password@postgres:5432/matehub
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=matehub
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=matehub
      - SECRET_KEY=your-secret-key-change-this-in-production
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - OLLAMA_DEFAULT_MODEL=llama3.2
      - LLM_MODEL=llama3.2
      - ENVIRONMENT=docker
    volumes:
      - ../app:/app/app:ro
      - ../celery_app.py:/app/celery_app.py:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A celery_app worker --loglevel=info --concurrency=4
    healthcheck:
      test: ["CMD", "celery", "-A", "celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - matehub-network

  # Celery Flower (optional - for monitoring)
  celery-flower:
    build:
      context: ..
      dockerfile: ops/Dockerfile
    container_name: matehub-celery-flower
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../celery_app.py:/app/celery_app.py:ro
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    command: celery -A celery_app flower --port=5555
    networks:
      - matehub-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  matehub-network:
    driver: bridge
